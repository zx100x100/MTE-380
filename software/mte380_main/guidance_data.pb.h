/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_GUIDANCE_DATA_PB_H_INCLUDED
#define PB_GUIDANCE_DATA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _GuidanceData { 
    float errVel; /* PID inputs */
    float errDrift; 
    float kP_vel; /* PID constants for velocity PID */
    float kI_vel; 
    float kD_vel; 
    float kP_drift; /* PID constants for drift PID */
    float kI_drift; 
    float kD_drift; 
    float leftOutputVel; /* left motor output from velocity PID */
    float rightOutputVel; /* right motor output from velocity PID */
    float leftOutputDrift; /* left motor output from drift PID */
    float rightOutputDrift; /* right motor output from drift PID */
    float leftPower; /* combined left motor output from vel and drift PIDs */
    float rightPower; /* combined right motor output from vel and drift PIDs */
    uint32_t segNum; /* current arena segment number */
} GuidanceData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define GuidanceData_init_default                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define GuidanceData_init_zero                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define GuidanceData_errVel_tag                  1
#define GuidanceData_errDrift_tag                2
#define GuidanceData_kP_vel_tag                  3
#define GuidanceData_kI_vel_tag                  4
#define GuidanceData_kD_vel_tag                  5
#define GuidanceData_kP_drift_tag                6
#define GuidanceData_kI_drift_tag                7
#define GuidanceData_kD_drift_tag                8
#define GuidanceData_leftOutputVel_tag           9
#define GuidanceData_rightOutputVel_tag          10
#define GuidanceData_leftOutputDrift_tag         11
#define GuidanceData_rightOutputDrift_tag        12
#define GuidanceData_leftPower_tag               13
#define GuidanceData_rightPower_tag              14
#define GuidanceData_segNum_tag                  15

/* Struct field encoding specification for nanopb */
#define GuidanceData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    errVel,            1) \
X(a, STATIC,   SINGULAR, FLOAT,    errDrift,          2) \
X(a, STATIC,   SINGULAR, FLOAT,    kP_vel,            3) \
X(a, STATIC,   SINGULAR, FLOAT,    kI_vel,            4) \
X(a, STATIC,   SINGULAR, FLOAT,    kD_vel,            5) \
X(a, STATIC,   SINGULAR, FLOAT,    kP_drift,          6) \
X(a, STATIC,   SINGULAR, FLOAT,    kI_drift,          7) \
X(a, STATIC,   SINGULAR, FLOAT,    kD_drift,          8) \
X(a, STATIC,   SINGULAR, FLOAT,    leftOutputVel,     9) \
X(a, STATIC,   SINGULAR, FLOAT,    rightOutputVel,   10) \
X(a, STATIC,   SINGULAR, FLOAT,    leftOutputDrift,  11) \
X(a, STATIC,   SINGULAR, FLOAT,    rightOutputDrift,  12) \
X(a, STATIC,   SINGULAR, FLOAT,    leftPower,        13) \
X(a, STATIC,   SINGULAR, FLOAT,    rightPower,       14) \
X(a, STATIC,   SINGULAR, UINT32,   segNum,           15)
#define GuidanceData_CALLBACK NULL
#define GuidanceData_DEFAULT NULL

extern const pb_msgdesc_t GuidanceData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define GuidanceData_fields &GuidanceData_msg

/* Maximum encoded size of messages (where known) */
#define GuidanceData_size                        76

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
