/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_CMD_DATA_PB_H_INCLUDED
#define PB_CMD_DATA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _CmdData_RunState { 
    CmdData_RunState_E_STOP = 0, 
    CmdData_RunState_AUTO = 1, 
    CmdData_RunState_TELEOP = 2 
} CmdData_RunState;

/* Struct definitions */
typedef struct _CmdData { 
    int32_t placeholder; 
    float leftPower; 
    float rightPower; 
    float propPower; 
    CmdData_RunState runState; 
} CmdData;


/* Helper constants for enums */
#define _CmdData_RunState_MIN CmdData_RunState_E_STOP
#define _CmdData_RunState_MAX CmdData_RunState_TELEOP
#define _CmdData_RunState_ARRAYSIZE ((CmdData_RunState)(CmdData_RunState_TELEOP+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define CmdData_init_default                     {0, 0, 0, 0, _CmdData_RunState_MIN}
#define CmdData_init_zero                        {0, 0, 0, 0, _CmdData_RunState_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define CmdData_placeholder_tag                  1
#define CmdData_leftPower_tag                    2
#define CmdData_rightPower_tag                   3
#define CmdData_propPower_tag                    4
#define CmdData_runState_tag                     5

/* Struct field encoding specification for nanopb */
#define CmdData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    placeholder,       1) \
X(a, STATIC,   SINGULAR, FLOAT,    leftPower,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    rightPower,        3) \
X(a, STATIC,   SINGULAR, FLOAT,    propPower,         4) \
X(a, STATIC,   SINGULAR, UENUM,    runState,          5)
#define CmdData_CALLBACK NULL
#define CmdData_DEFAULT NULL

extern const pb_msgdesc_t CmdData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CmdData_fields &CmdData_msg

/* Maximum encoded size of messages (where known) */
#define CmdData_size                             28

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
